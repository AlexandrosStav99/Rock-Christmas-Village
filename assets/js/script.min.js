"scrollRestoration" in history && (history.scrollRestoration = "manual"),
  window.scrollTo(0, 0);
const burger = document.querySelector(".burger"),
  nav = document.querySelector(".links"),
  navBtn = document.querySelector(".nav-btn"),
  navbar = document.querySelector("nav");
burger.addEventListener("click", () => {
  nav.classList.toggle("nav-active"),
    navBtn && navBtn.classList.toggle("nav-active"),
    burger.classList.toggle("toggle"),
    document.body.classList.toggle("menu-active"),
    nav.classList.contains("nav-active")
      ? (navbar.style.borderRadius = "0")
      : window.scrollY > 1e3 &&
        ((navbar.style.borderBottomRightRadius = "35px"),
        (navbar.style.borderBottomLeftRadius = "35px"));
}),
  document.addEventListener("click", (t) => {
    const e = document.querySelector(".burger"),
      i = document.querySelector(".links"),
      s = document.querySelector(".nav-btn"),
      n = document.querySelector("nav");
    if (
      i.classList.contains("nav-active") &&
      !i.contains(t.target) &&
      !e.contains(t.target) &&
      !s?.contains(t.target)
    ) {
      i.classList.remove("nav-active"),
        s?.classList.remove("nav-active"),
        e.classList.remove("toggle"),
        document.body.classList.remove("menu-active");
      const t = window.scrollY || window.pageYOffset,
        o = document.querySelector(".hero");
      t > (o ? o.offsetTop + o.offsetHeight : 1e3) - n.offsetHeight &&
        ((n.style.borderBottomRightRadius = "35px"),
        (n.style.borderBottomLeftRadius = "35px"));
    }
  }),
  document.addEventListener(
    "touchmove",
    function (t) {
      document.body.classList.contains("menu-active") && t.preventDefault();
    },
    { passive: !1 }
  ),
  document.addEventListener(
    "wheel",
    function (t) {
      document.body.classList.contains("menu-active") && t.preventDefault();
    },
    { passive: !1 }
  ),
  document.querySelectorAll('a[href^="#"]').forEach((t) => {
    t.addEventListener("click", function (t) {
      t.preventDefault();
      let e = document.querySelector(this.getAttribute("href")),
        i = document.querySelector(".links"),
        s = document.querySelector(".nav-btn"),
        n = document.querySelector(".burger"),
        o = document.querySelector("nav");
      if (i.classList.contains("nav-active")) {
        setTimeout(() => {
          i.classList.remove("nav-active"),
            s && s.classList.remove("nav-active"),
            n.classList.remove("toggle"),
            document.body.classList.remove("menu-active");
        }, 300),
          s && s.classList.remove("nav-active"),
          n.classList.remove("toggle"),
          document.body.classList.remove("menu-active");
        let t = window.scrollY || window.pageYOffset,
          e = document.querySelector(".hero");
        t > (e ? e.offsetTop + e.offsetHeight : 1e3) - o.offsetHeight &&
          ((o.style.borderBottomRightRadius = "35px"),
          (o.style.borderBottomLeftRadius = "35px"));
      }
      e && e.scrollIntoView({ behavior: "smooth", block: "start" });
    });
  });
const track = document.getElementById("carousel-track"),
  items = Array.from(track.children),
  prevBtn = document.querySelector(".carousel-prev"),
  nextBtn = document.querySelector(".carousel-next"),
  dotsContainer = document.getElementById("carousel-dots"),
  filterChips = document.querySelectorAll(".filter-chip");
let autoplayInterval,
  currentIndex = 0,
  visibleItems = [...items];
const AUTOPLAY_DELAY = 4e3;
let itemWidth = 0,
  gap = 0;
function calculateDimensions() {
  if (visibleItems.length > 0) {
    let t = visibleItems[0];
    itemWidth = t.offsetWidth;
    let e = window.getComputedStyle(track);
    gap = parseFloat(e.gap) || 32;
  }
}
function createDots() {
  (dotsContainer.innerHTML = ""),
    visibleItems.forEach((t, e) => {
      let i = document.createElement("div");
      i.classList.add("carousel-dot"),
        e === currentIndex && i.classList.add("active"),
        i.addEventListener("click", () => goToSlide(e)),
        dotsContainer.appendChild(i);
    });
}
function updateDots() {
  dotsContainer.querySelectorAll(".carousel-dot").forEach((t, e) => {
    t.classList.toggle("active", e === currentIndex);
  });
}
function updateActiveItem() {
  visibleItems.forEach((t, e) => {
    t.classList.toggle("active", e === currentIndex);
  });
}
function goToSlide(t) {
  if (t < 0 || t >= visibleItems.length) return;
  (currentIndex = t), calculateDimensions();
  let e = currentIndex * (itemWidth + gap),
    i = track.parentElement.offsetWidth / 2 - itemWidth / 2;
  (track.style.transform = `translateX(-${e - i}px)`),
    updateActiveItem(),
    updateDots(),
    updateNavButtons();
}
function nextSlide() {
  goToSlide((currentIndex + 1) % visibleItems.length);
}
function prevSlide() {
  goToSlide((currentIndex - 1 + visibleItems.length) % visibleItems.length);
}
function updateNavButtons() {}
function startAutoplay() {
  stopAutoplay(), (autoplayInterval = setInterval(nextSlide, 4e3));
}
function stopAutoplay() {
  clearInterval(autoplayInterval);
}
prevBtn.addEventListener("click", () => {
  prevSlide(), stopAutoplay(), startAutoplay();
}),
  nextBtn.addEventListener("click", () => {
    nextSlide(), stopAutoplay(), startAutoplay();
  }),
  track.parentElement.addEventListener("mouseenter", stopAutoplay),
  track.parentElement.addEventListener("mouseleave", startAutoplay),
  track.parentElement.addEventListener("touchstart", stopAutoplay),
  track.parentElement.addEventListener("touchend", () => {
    setTimeout(startAutoplay, 1e3);
  }),
  document.addEventListener("keydown", (t) => {
    "ArrowLeft" === t.key
      ? (prevSlide(), stopAutoplay(), startAutoplay())
      : "ArrowRight" === t.key &&
        (nextSlide(), stopAutoplay(), startAutoplay());
  }),
  document.addEventListener("visibilitychange", () => {
    document.hidden ? stopAutoplay() : startAutoplay();
  });
let resizeTimeout,
  touchStartX = 0,
  touchEndX = 0;
function handleSwipe() {
  touchEndX < touchStartX - 50 && nextSlide(),
    touchEndX > touchStartX + 50 && prevSlide();
}
function updateNavbarState() {
  let t = document.querySelector("nav"),
    e = document.querySelector(".links"),
    i = (document.querySelector(".burger"), document.querySelector(".hero")),
    s = document.querySelector(".footer-section");
  if (!t || !i) return;
  let n = e && e.classList.contains("nav-active"),
    o = i.offsetTop + i.offsetHeight,
    r = s ? s.offsetTop : 999999,
    a = window.scrollY || window.pageYOffset,
    h = a + t.offsetHeight,
    l = a < o - t.offsetHeight,
    c = h >= r;
  t.classList.remove("over-hero", "over-footer", "over-middle"),
    l
      ? t.classList.add("over-hero")
      : c
      ? t.classList.add("over-footer")
      : t.classList.add("over-middle"),
    t.classList.contains("over-middle") && !n
      ? ((t.style.borderBottomRightRadius = "35px"),
        (t.style.borderBottomLeftRadius = "35px"))
      : ((t.style.borderBottomRightRadius = "0px"),
        (t.style.borderBottomLeftRadius = "0px"));
}
window.addEventListener("scroll", updateNavbarState, { passive: !0 }),
  document.addEventListener("DOMContentLoaded", function () {
    const t = document.querySelector("nav");
    t && t.classList.add("over-hero"),
      -1 !== navigator.userAgent.indexOf("Safari") &&
        -1 === navigator.userAgent.indexOf("Chrome") &&
        (document.documentElement.style.setProperty(
          "color-scheme",
          "light only",
          "important"
        ),
        document.body.style.setProperty(
          "color-scheme",
          "light only",
          "important"
        )),
      setTimeout(updateNavbarState, 100);
  }),
  window.addEventListener("load", function () {
    updateNavbarState();
  }),
  track.addEventListener("touchstart", (t) => {
    touchStartX = t.changedTouches[0].screenX;
  }),
  track.addEventListener("touchend", (t) => {
    (touchEndX = t.changedTouches[0].screenX), handleSwipe();
  }),
  filterChips.forEach((t) => {
    t.addEventListener("click", () => {
      filterChips.forEach((t) => t.classList.remove("active")),
        t.classList.add("active");
      let e = t.getAttribute("data-filter");
      items.forEach((t) => {
        t.style.display = "none";
      }),
        (visibleItems =
          "all" === e
            ? [...items]
            : items.filter(
                (t) => t.getAttribute("data-category") === e
              )).forEach((t) => {
          t.style.display = "flex";
        }),
        (currentIndex = 0),
        createDots(),
        goToSlide(0),
        stopAutoplay(),
        startAutoplay();
    });
  }),
  window.addEventListener("resize", () => {
    clearTimeout(resizeTimeout),
      (resizeTimeout = setTimeout(() => {
        goToSlide(currentIndex);
      }, 250));
  }),
  window.addEventListener("load", () => {
    calculateDimensions(), createDots(), goToSlide(0), startAutoplay();
  }),
  window.addEventListener("scroll", updateNavbarState, { passive: !0 }),
  document.addEventListener("DOMContentLoaded", function () {
    const t = document.querySelector("nav");
    t &&
      ((t.style.backgroundColor = "var(--maroon)"),
      (t.style.boxShadow = "none"),
      (t.style.backdropFilter = ""),
      (t.style.webkitBackdropFilter = ""),
      (t.style.borderRadius = "0px"),
      t.style.setProperty("background-color", "var(--maroon)", "important"));
    const e = document.querySelector(".burger");
    e &&
      e.querySelectorAll("span").forEach((t) => {
        t.style.backgroundColor = "var(--cream)";
      }),
      -1 !== navigator.userAgent.indexOf("Safari") &&
        -1 === navigator.userAgent.indexOf("Chrome") &&
        (document.documentElement.style.setProperty(
          "color-scheme",
          "light only",
          "important"
        ),
        document.body.style.setProperty(
          "color-scheme",
          "light only",
          "important"
        )),
      setTimeout(updateNavbarState, 100);
  }),
  window.addEventListener("load", function () {
    updateNavbarState();
  });
const observerOptions = { threshold: 0.2, rootMargin: "0px 0px -100px 0px" },
  observer = new IntersectionObserver((t) => {
    t.forEach((t) => {
      t.isIntersecting && t.target.classList.add("animate-in");
    });
  }, observerOptions),
  aboutSection = document.querySelector(".about-section");
aboutSection && observer.observe(aboutSection);
const flipBook = (t) => {
  t.style.setProperty("--c", 0),
    t.querySelectorAll(".page-desk").forEach((e, i) => {
      e.style.setProperty("--i", i),
        e.addEventListener("click", (e) => {
          if (e.target.closest("a")) return;
          let s = e.target.closest(".back-desk") ? i : i + 1;
          t.style.setProperty("--c", s);
        });
    });
};
document.querySelectorAll(".book-desk").forEach(flipBook),
  (function (t) {
    var e = {};
    function i(s) {
      if (e[s]) return e[s].exports;
      var n = (e[s] = { i: s, l: !1, exports: {} });
      return t[s].call(n.exports, n, n.exports, i), (n.l = !0), n.exports;
    }
    (i.m = t),
      (i.c = e),
      (i.d = function (t, e, s) {
        i.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: s });
      }),
      (i.r = function (t) {
        "undefined" != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }),
          Object.defineProperty(t, "__esModule", { value: !0 });
      }),
      (i.t = function (t, e) {
        if (
          (1 & e && (t = i(t)),
          8 & e || (4 & e && "object" == typeof t && t && t.__esModule))
        )
          return t;
        var s = Object.create(null);
        if (
          (i.r(s),
          Object.defineProperty(s, "default", { enumerable: !0, value: t }),
          2 & e && "string" != typeof t)
        )
          for (var n in t)
            i.d(
              s,
              n,
              function (e) {
                return t[e];
              }.bind(null, n)
            );
        return s;
      }),
      (i.n = function (t) {
        var e =
          t && t.__esModule
            ? function () {
                return t.default;
              }
            : function () {
                return t;
              };
        return i.d(e, "a", e), e;
      }),
      (i.o = function (t, e) {
        return Object.prototype.hasOwnProperty.call(t, e);
      }),
      (i.p = ""),
      i((i.s = 1));
  })([
    function (t, e, i) {
      var s = i(2),
        n = i(3);
      "string" == typeof (n = n.__esModule ? n.default : n) &&
        (n = [[t.i, n, ""]]),
        s(n, { insert: "head", singleton: !1 }),
        (t.exports = n.locals || {});
    },
    function (t, e, i) {
      i(6), (t.exports = i(5));
    },
    function (t, e, i) {
      "use strict";
      var s,
        n,
        o =
          ((s = {}),
          function (t) {
            if (void 0 === s[t]) {
              var e = document.querySelector(t);
              if (
                window.HTMLIFrameElement &&
                e instanceof window.HTMLIFrameElement
              )
                try {
                  e = e.contentDocument.head;
                } catch (t) {
                  e = null;
                }
              s[t] = e;
            }
            return s[t];
          }),
        r = [];
      function a(t) {
        for (var e = -1, i = 0; i < r.length; i++)
          if (r[i].identifier === t) {
            e = i;
            break;
          }
        return e;
      }
      function h(t, e) {
        for (var i = {}, s = [], n = 0; n < t.length; n++) {
          var o = t[n],
            h = e.base ? o[0] + e.base : o[0],
            l = i[h] || 0,
            c = "".concat(h, " ").concat(l);
          i[h] = l + 1;
          var d = a(c),
            g = { css: o[1], media: o[2], sourceMap: o[3] };
          -1 !== d
            ? (r[d].references++, r[d].updater(g))
            : r.push({ identifier: c, updater: f(g, e), references: 1 }),
            s.push(c);
        }
        return s;
      }
      function l(t) {
        var e = document.createElement("style"),
          s = t.attributes || {};
        if (void 0 === s.nonce) {
          var n = i.nc;
          n && (s.nonce = n);
        }
        if (
          (Object.keys(s).forEach(function (t) {
            e.setAttribute(t, s[t]);
          }),
          "function" == typeof t.insert)
        )
          t.insert(e);
        else {
          var r = o(t.insert || "head");
          if (!r)
            throw Error(
              "Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid."
            );
          r.appendChild(e);
        }
        return e;
      }
      var c,
        d =
          ((c = []),
          function (t, e) {
            return (c[t] = e), c.filter(Boolean).join("\n");
          });
      function g(t, e, i, s) {
        var n = i
          ? ""
          : s.media
          ? "@media ".concat(s.media, " {").concat(s.css, "}")
          : s.css;
        if (t.styleSheet) t.styleSheet.cssText = d(e, n);
        else {
          var o = document.createTextNode(n),
            r = t.childNodes;
          r[e] && t.removeChild(r[e]),
            r.length ? t.insertBefore(o, r[e]) : t.appendChild(o);
        }
      }
      function p(t, e, i) {
        var s = i.css,
          n = i.media,
          o = i.sourceMap;
        if (
          (n ? t.setAttribute("media", n) : t.removeAttribute("media"),
          o &&
            btoa &&
            (s += "\n/*# sourceMappingURL=data:application/json;base64,".concat(
              btoa(unescape(encodeURIComponent(JSON.stringify(o)))),
              " */"
            )),
          t.styleSheet)
        )
          t.styleSheet.cssText = s;
        else {
          for (; t.firstChild; ) t.removeChild(t.firstChild);
          t.appendChild(document.createTextNode(s));
        }
      }
      var u = null,
        m = 0;
      function f(t, e) {
        var i, s, n;
        if (e.singleton) {
          var o = m++;
          (i = u || (u = l(e))),
            (s = g.bind(null, i, o, !1)),
            (n = g.bind(null, i, o, !0));
        } else
          (i = l(e)),
            (s = p.bind(null, i, e)),
            (n = function () {
              !(function (t) {
                if (null === t.parentNode) return !1;
                t.parentNode.removeChild(t);
              })(i);
            });
        return (
          s(t),
          function (e) {
            e
              ? (e.css !== t.css ||
                  e.media !== t.media ||
                  e.sourceMap !== t.sourceMap) &&
                s((t = e))
              : n();
          }
        );
      }
      t.exports = function (t, e) {
        (e = e || {}).singleton ||
          "boolean" == typeof e.singleton ||
          (e.singleton =
            (void 0 === n &&
              (n = Boolean(window && document && document.all && !window.atob)),
            n));
        var i = h((t = t || []), e);
        return function (t) {
          if (
            ((t = t || []),
            "[object Array]" === Object.prototype.toString.call(t))
          ) {
            for (var s = 0; s < i.length; s++) {
              var n = a(i[s]);
              r[n].references--;
            }
            for (var o = h(t, e), l = 0; l < i.length; l++) {
              var c = a(i[l]);
              0 === r[c].references && (r[c].updater(), r.splice(c, 1));
            }
            i = o;
          }
        };
      };
    },
    function (t, e, i) {
      (e = i(4)(!1)).push([
        t.i,
        ".stf__wrapper {\n  position: relative;\n  display: block;\n  box-sizing: border-box;\n  transform: translateZ(0);\n}\n\n.stf__wrapper canvas {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n}\n\n.stf__block {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n}\n\n.stf__item {\n  display: none;\n  position: absolute;\n}\n\n.stf__item:first-child{\n padding:0;\n}\n\n.stf__outerShadow {\n  position: absolute;\n}\n\n.stf__innerShadow {\n  position: absolute;\n}",
        "",
      ]),
        (t.exports = e);
    },
    function (t, e, i) {
      "use strict";
      t.exports = function (t) {
        var e = [];
        return (
          (e.toString = function () {
            return this.map(function (e) {
              var i = (function (t, e) {
                var i,
                  s,
                  n,
                  o = t[1] || "",
                  r = t[3];
                if (!r) return o;
                if (e && "function" == typeof btoa) {
                  var a =
                    ((i = r),
                    (s = btoa(unescape(encodeURIComponent(JSON.stringify(i))))),
                    (n =
                      "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(
                        s
                      )),
                    "/*# ".concat(n, " */"));
                  return [o]
                    .concat(
                      r.sources.map(function (t) {
                        return "/*# sourceURL="
                          .concat(r.sourceRoot || "")
                          .concat(t, " */");
                      })
                    )
                    .concat([a])
                    .join("\n");
                }
                return [o].join("\n");
              })(e, t);
              return e[2] ? "@media ".concat(e[2], " {").concat(i, "}") : i;
            }).join("");
          }),
          (e.i = function (t, i, s) {
            "string" == typeof t && (t = [[null, t, ""]]);
            var n = {};
            if (s)
              for (var o = 0; o < this.length; o++) {
                var r = this[o][0];
                null != r && (n[r] = !0);
              }
            for (var a = 0; a < t.length; a++) {
              var h = [].concat(t[a]);
              (s && n[h[0]]) ||
                (i &&
                  (h[2]
                    ? (h[2] = "".concat(i, " and ").concat(h[2]))
                    : (h[2] = i)),
                e.push(h));
            }
          }),
          e
        );
      };
    },
    function (t, e, i) {},
    function (t, e, i) {
      "use strict";
      i.r(e);
      class s {
        constructor(t) {
          (this.state = {
            angle: 0,
            area: [],
            corners: null,
            position: { x: 0, y: 0 },
          }),
            (this.render = t);
        }
        setPosition(t) {
          this.state.position = t;
        }
        setAngle(t) {
          this.state.angle = t;
        }
        setArea(t) {
          this.state.area = t;
        }
        setCorners(t) {
          this.state.corners = t;
        }
        getAngle() {
          return this.state.angle;
        }
      }
      class n extends s {
        constructor(t, e) {
          super(t),
            (this.image = null),
            (this.isLoad = !1),
            (this.loadingAngle = 0),
            (this.image = new Image()),
            (this.image.src = e);
        }
        draw() {
          let t = this.render.getContext(),
            e = this.render.convertToGlobal(this.state.position),
            i = this.render.getRect().pageWidth,
            s = this.render.getRect().height;
          for (let i of (t.save(),
          t.translate(e.x, e.y),
          t.beginPath(),
          this.state.area))
            null !== i &&
              ((i = this.render.convertToGlobal(i)),
              t.lineTo(i.x - e.x, i.y - e.y));
          if ((t.rotate(this.state.angle), t.clip(), this.isLoad))
            t.drawImage(this.image, 0, 0, i, s);
          else {
            t.beginPath(),
              (t.strokeStyle = "rgb(200, 200, 200)"),
              (t.fillStyle = "rgb(255, 255, 255)"),
              (t.lineWidth = 1),
              t.rect(1, 1, i - 1, s - 1),
              t.stroke(),
              t.fill();
            let e = { x: i / 2, y: s / 2 };
            t.beginPath(),
              (t.lineWidth = 10),
              t.arc(
                e.x,
                e.y,
                20,
                this.loadingAngle,
                (3 * Math.PI) / 2 + this.loadingAngle
              ),
              t.stroke(),
              t.closePath(),
              (this.loadingAngle += 0.07),
              this.loadingAngle >= 2 * Math.PI && (this.loadingAngle = 0);
          }
          t.restore();
        }
        simpleDraw(t) {
          let e = this.render.getRect(),
            i = this.render.getContext(),
            s = e.pageWidth,
            n = e.height,
            o = 1 === t ? e.left + e.pageWidth : e.left,
            r = e.top;
          if (this.isLoad) i.drawImage(this.image, o, r, s, n);
          else {
            i.beginPath(),
              (i.strokeStyle = "rgb(200, 200, 200)"),
              (i.fillStyle = "rgb(255, 255, 255)"),
              (i.lineWidth = 1),
              i.rect(o + 1, r + 1, s - 1, n - 1),
              i.stroke(),
              i.fill();
            let t = { x: o + s / 2, y: r + n / 2 };
            i.beginPath(),
              (i.lineWidth = 10),
              i.arc(
                t.x,
                t.y,
                20,
                this.loadingAngle,
                (3 * Math.PI) / 2 + this.loadingAngle
              ),
              i.stroke(),
              i.closePath(),
              (this.loadingAngle += 0.07),
              this.loadingAngle >= 2 * Math.PI && (this.loadingAngle = 0);
          }
        }
        load() {
          this.isLoad ||
            (this.image.onload = () => {
              this.isLoad = !0;
            });
        }
      }
      class o {
        constructor(t, e) {
          (this.pages = []), (this.render = e), (this.app = t);
        }
        getPageCount() {
          return this.pages.length;
        }
        getPages() {
          return this.pages;
        }
        getPage(t) {
          if (t >= 0 && t < this.pages.length) return this.pages[t];
          throw Error("Invalid page number");
        }
        show(t) {
          t < 0 ||
            t >= this.pages.length ||
            (this.app.updatePage(t),
            "portrait" === this.render.getOrientation()
              ? (this.render.setLeftPage(null),
                this.render.setRightPage(this.pages[t]))
              : (t === this.pages.length - 1 && t--,
                this.render.setLeftPage(this.pages[t]),
                this.render.setRightPage(this.pages[t + 1])));
        }
      }
      class r extends o {
        constructor(t, e, i) {
          super(t, e), (this.imagesHref = i);
        }
        load() {
          for (let t of this.imagesHref) {
            let e = new n(this.render, t);
            e.load(), this.pages.push(e);
          }
        }
      }
      class a {
        static GetDestinationFromTwoPoint(t, e) {
          return null === t || null === e
            ? 1 / 0
            : Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2));
        }
        static GetSegmentLength(t) {
          return a.GetDestinationFromTwoPoint(t[0], t[1]);
        }
        static GetAngleFromTwoLine(t, e) {
          let i = t[0].y - t[1].y,
            s = e[0].y - e[1].y,
            n = t[1].x - t[0].x,
            o = e[1].x - e[0].x;
          return Math.acos(
            (i * s + n * o) /
              (Math.sqrt(i * i + n * n) * Math.sqrt(s * s + o * o))
          );
        }
        static PointInRect(t, e) {
          return null === e
            ? null
            : e.x >= t.left &&
              e.x <= t.width + t.left &&
              e.y >= t.top &&
              e.y <= t.top + t.height
            ? e
            : null;
        }
        static GetRotatedPoint(t, e, i) {
          return {
            x: t.x * Math.cos(i) + t.y * Math.sin(i) + e.x,
            y: t.y * Math.cos(i) - t.x * Math.sin(i) + e.y,
          };
        }
        static GetIntersectByLineAndCircle(t, e, i) {
          if (a.GetDestinationFromTwoPoint(t, i) <= e) return i;
          let s = t.x,
            n = t.y,
            o = i.x,
            r = i.y,
            h =
              Math.sqrt(
                (Math.pow(e, 2) * Math.pow(s - o, 2)) /
                  (Math.pow(s - o, 2) + Math.pow(n - r, 2))
              ) + s;
          i.x < 0 && (h *= -1);
          let l = ((h - s) * (n - r)) / (s - o) + n;
          return s - o + n === 0 && (l = e), { x: h, y: l };
        }
        static GetIntersectByTwoSegment(t, e, i) {
          return a.PointInRect(t, a.GetIntersectByTwoLine(e, i));
        }
        static GetIntersectByTwoLine(t, e) {
          let i = t[0].y - t[1].y,
            s = e[0].y - e[1].y,
            n = t[1].x - t[0].x,
            o = e[1].x - e[0].x,
            r = t[0].x * t[1].y - t[1].x * t[0].y,
            a = e[0].x * e[1].y - e[1].x * e[0].y,
            h = -(r * o - a * n) / (i * o - s * n),
            l = -(i * a - s * r) / (i * o - s * n);
          if (isFinite(h) && isFinite(l)) return { x: h, y: l };
          if (0.1 > Math.abs(i * a - s * r - (n * a - o * r)))
            throw Error("Segment included");
          return null;
        }
        static GetCordsFromTwoPoint(t, e) {
          let i = Math.abs(t.x - e.x),
            s = Math.abs(t.y - e.y),
            n = Math.max(i, s),
            o = [t];
          function r(t, e, i, s, n) {
            return e > t ? t + n * (i / s) : e < t ? t - n * (i / s) : t;
          }
          for (let a = 1; a <= n; a++)
            o.push({ x: r(t.x, e.x, i, n, a), y: r(t.y, e.y, s, n, a) });
          return o;
        }
      }
      class h extends s {
        constructor(t, e) {
          super(t),
            (this.copiedElement = null),
            (this.isLoad = !1),
            (this.element = e),
            this.element.classList.add("stf__item"),
            (this.element.style.position = "absolute"),
            (this.element.style.left = "0"),
            (this.element.style.top = "0"),
            (this.element.style.boxSizing = "border-box");
        }
        draw() {
          let t = this.render.convertToGlobal(this.state.position),
            e = this.render.getRect().pageWidth,
            i = this.render.getRect().height;
          this.element.classList.remove("--simple"),
            (this.element.style.display = "block"),
            (this.element.style.left = "0"),
            (this.element.style.top = "0"),
            (this.element.style.transformOrigin = "0 0"),
            (this.element.style.width = e + "px"),
            (this.element.style.height = i + "px");
          let s = "polygon( ";
          for (let t of this.state.area)
            if (null !== t) {
              let e =
                1 === this.render.getDirection()
                  ? {
                      x: -t.x + this.state.position.x,
                      y: t.y - this.state.position.y,
                    }
                  : {
                      x: t.x - this.state.position.x,
                      y: t.y - this.state.position.y,
                    };
              s +=
                (e = a.GetRotatedPoint(e, { x: 0, y: 0 }, this.state.angle)).x +
                "px " +
                e.y +
                "px, ";
            }
          (s = s.slice(0, -2)),
            (s += ")"),
            (this.element.style.clipPath = s),
            this.element.style.setProperty("-webkit-clip-path", s),
            (this.element.style.transform =
              "translate3d(" +
              t.x +
              "px, " +
              t.y +
              "px, 0) rotate(" +
              this.state.angle +
              "rad)");
        }
        simpleDraw(t) {
          if (this.element.classList.contains("--simple")) return;
          null === this.copiedElement &&
            ((this.copiedElement = this.element.cloneNode(!0)),
            this.element.parentElement.appendChild(this.copiedElement));
          let e = this.render.getRect(),
            i = e.pageWidth,
            s = e.height,
            n = 1 === t ? e.left + e.pageWidth : e.left,
            o = e.top;
          this.element.classList.add("--simple"),
            (this.copiedElement.style.cssText =
              "position: absolute; display: block; height: " +
              s +
              "px; left: " +
              n +
              "px; top: " +
              o +
              "px; width: " +
              i +
              "px; z-index: " +
              (this.render.getSettings().startZIndex + 1) +
              ";"),
            (this.element.style.cssText = "display: none");
        }
        clearSaved() {
          this.element.classList.remove("--simple"),
            null !== this.copiedElement &&
              (this.copiedElement.remove(), (this.copiedElement = null));
        }
        getElement() {
          return this.element;
        }
        load() {
          this.isLoad = !0;
        }
      }
      class l extends o {
        constructor(t, e, i, s) {
          super(t, e), (this.element = i), (this.pagesElement = s);
        }
        load() {
          for (let t of this.pagesElement) {
            let e = new h(this.render, t);
            e.load(), this.pages.push(e);
          }
        }
      }
      class c {
        constructor(t, e, i, s) {
          (this.direction = t),
            (this.corner = e),
            (this.pageWidth = i),
            (this.pageHeight = s),
            (this.topIntersectPoint = null),
            (this.sideIntersectPoint = null),
            (this.bottomIntersectPoint = null);
        }
        calc(t) {
          try {
            (this.position = this.preparePosition(t)),
              this.calculateIntersectPoint(this.position);
          } catch (t) {}
        }
        getPageRect(t) {
          return "top" === this.corner
            ? this.getRectFromBasePoint(
                [
                  { x: 0, y: 0 },
                  { x: this.pageWidth, y: 0 },
                  { x: 0, y: this.pageHeight },
                  { x: this.pageWidth, y: this.pageHeight },
                ],
                t
              )
            : this.getRectFromBasePoint(
                [
                  { x: 0, y: -this.pageHeight },
                  { x: this.pageWidth, y: -this.pageHeight },
                  { x: 0, y: 0 },
                  { x: this.pageWidth, y: 0 },
                ],
                t
              );
        }
        getRectFromBasePoint(t, e) {
          return {
            topLeft: this.getRotatedPoint(t[0], e),
            topRight: this.getRotatedPoint(t[1], e),
            bottomLeft: this.getRotatedPoint(t[2], e),
            bottomRight: this.getRotatedPoint(t[3], e),
          };
        }
        getRotatedPoint(t, e) {
          return {
            x: t.x * Math.cos(this.angle) + t.y * Math.sin(this.angle) + e.x,
            y: t.y * Math.cos(this.angle) - t.x * Math.sin(this.angle) + e.y,
          };
        }
        updateAngleAndGeometry(t) {
          (this.angle = this.calculateAngle(t)),
            (this.rect = this.getPageRect(t));
        }
        calculateIntersectPoint(t) {
          let e = {
            left: -1,
            top: -1,
            width: this.pageWidth + 2,
            height: this.pageHeight + 2,
          };
          "top" === this.corner
            ? ((this.topIntersectPoint = a.GetIntersectByTwoSegment(
                e,
                [t, this.rect.topRight],
                [
                  { x: 0, y: 0 },
                  { x: this.pageWidth, y: 0 },
                ]
              )),
              (this.sideIntersectPoint = a.GetIntersectByTwoSegment(
                e,
                [t, this.rect.bottomLeft],
                [
                  { x: this.pageWidth, y: 0 },
                  { x: this.pageWidth, y: this.pageHeight },
                ]
              )),
              (this.bottomIntersectPoint = a.GetIntersectByTwoSegment(
                e,
                [this.rect.bottomLeft, this.rect.bottomRight],
                [
                  { x: 0, y: this.pageHeight },
                  { x: this.pageWidth, y: this.pageHeight },
                ]
              )))
            : ((this.topIntersectPoint = a.GetIntersectByTwoSegment(
                e,
                [this.rect.topLeft, this.rect.topRight],
                [
                  { x: 0, y: 0 },
                  { x: this.pageWidth, y: 0 },
                ]
              )),
              (this.sideIntersectPoint = a.GetIntersectByTwoSegment(
                e,
                [t, this.rect.topLeft],
                [
                  { x: this.pageWidth, y: 0 },
                  { x: this.pageWidth, y: this.pageHeight },
                ]
              )),
              (this.bottomIntersectPoint = a.GetIntersectByTwoSegment(
                e,
                [this.rect.bottomLeft, this.rect.bottomRight],
                [
                  { x: 0, y: this.pageHeight },
                  { x: this.pageWidth, y: this.pageHeight },
                ]
              )));
        }
        checkPositionAtCenterLine(t, e, i) {
          let s = t,
            n = a.GetIntersectByLineAndCircle(e, this.pageWidth, s);
          s !== n && ((s = n), this.updateAngleAndGeometry(s));
          let o = Math.sqrt(
              Math.pow(this.pageWidth, 2) + Math.pow(this.pageHeight, 2)
            ),
            r = this.rect.bottomRight,
            h = this.rect.topLeft;
          if (
            ("bottom" === this.corner &&
              ((r = this.rect.topRight), (h = this.rect.bottomLeft)),
            r.x <= 0)
          ) {
            let t = a.GetIntersectByLineAndCircle(i, o, h);
            t !== s && ((s = t), this.updateAngleAndGeometry(s));
          }
          return s;
        }
        preparePosition(t) {
          let e = t;
          if (
            (this.updateAngleAndGeometry(e),
            1 >
              Math.abs(
                (e =
                  "top" === this.corner
                    ? this.checkPositionAtCenterLine(
                        e,
                        { x: 0, y: 0 },
                        { x: 0, y: this.pageHeight }
                      )
                    : this.checkPositionAtCenterLine(
                        e,
                        { x: 0, y: this.pageHeight },
                        { x: 0, y: 0 }
                      )).x - this.pageWidth
              ) && 1 > Math.abs(e.y))
          )
            throw Error("Point is too small");
          return e;
        }
        calculateAngle(t) {
          let e = this.pageWidth - t.x,
            i = "bottom" === this.corner ? this.pageHeight - t.y : t.y,
            s = 2 * Math.acos(e / Math.sqrt(i * i + e * e));
          i < 0 && (s = -s);
          let n = Math.PI - s;
          if (!isFinite(s) || (n >= 0 && n < 0.003))
            throw Error("The G point is too small");
          return "bottom" === this.corner && (s = -s), s;
        }
        getAngle() {
          return 0 === this.direction ? -this.angle : this.angle;
        }
        getRect() {
          return this.rect;
        }
        getPosition() {
          return this.position;
        }
        getActiveCorner() {
          return 0 === this.direction ? this.rect.topLeft : this.rect.topRight;
        }
        getDirection() {
          return this.direction;
        }
        getIntersectPoint() {
          return {
            top: this.topIntersectPoint,
            bottom: this.bottomIntersectPoint,
            side: this.sideIntersectPoint,
          };
        }
        getSegmentToShadowLine() {
          let t = this.getShadowStartPoint();
          return [
            t,
            t !== this.sideIntersectPoint && null !== this.sideIntersectPoint
              ? this.sideIntersectPoint
              : this.bottomIntersectPoint,
          ];
        }
        getShadowStartPoint() {
          return "top" === this.corner
            ? this.topIntersectPoint
            : null !== this.sideIntersectPoint
            ? this.sideIntersectPoint
            : this.topIntersectPoint;
        }
        getShadowAngle() {
          let t = a.GetAngleFromTwoLine(this.getSegmentToShadowLine(), [
            { x: 0, y: 0 },
            { x: this.pageWidth, y: 0 },
          ]);
          return 0 === this.direction ? t : Math.PI - t;
        }
        getShadowLength() {
          return a.GetSegmentLength(this.getSegmentToShadowLine());
        }
        getFlippingProgress() {
          return Math.abs(
            ((this.position.x - this.pageWidth) / (2 * this.pageWidth)) * 100
          );
        }
        getFlippingClipArea() {
          let t = [],
            e = !1;
          return (
            t.push(this.rect.topLeft),
            t.push(this.topIntersectPoint),
            null === this.sideIntersectPoint
              ? (e = !0)
              : (t.push(this.sideIntersectPoint),
                null === this.bottomIntersectPoint && (e = !1)),
            t.push(this.bottomIntersectPoint),
            (e || "bottom" === this.corner) && t.push(this.rect.bottomLeft),
            t
          );
        }
        getCorner() {
          return this.corner;
        }
        getBottomClipArea() {
          let t = [];
          return (
            t.push(this.topIntersectPoint),
            "top" === this.corner
              ? t.push({ x: this.pageWidth, y: 0 })
              : (null !== this.topIntersectPoint &&
                  t.push({ x: this.pageWidth, y: 0 }),
                t.push({ x: this.pageWidth, y: this.pageHeight })),
            null !== this.sideIntersectPoint
              ? a.GetDestinationFromTwoPoint(
                  this.sideIntersectPoint,
                  this.topIntersectPoint
                ) >= 10 && t.push(this.sideIntersectPoint)
              : "top" === this.corner &&
                t.push({ x: this.pageWidth, y: this.pageHeight }),
            t.push(this.bottomIntersectPoint),
            t.push(this.topIntersectPoint),
            t
          );
        }
        getBottomPagePosition() {
          return 1 === this.direction
            ? { x: this.pageWidth, y: 0 }
            : { x: 0, y: 0 };
        }
      }
      class d {
        constructor(t, e) {
          (this.flippingPage = null),
            (this.bottomPage = null),
            (this.calc = null),
            (this.state = "read"),
            (this.render = t),
            (this.app = e);
        }
        getCalculation() {
          return this.calc;
        }
        start(t) {
          this.reset();
          let e = this.render.convertToBook(t),
            i = this.getBoundsRect(),
            s = 0;
          "portrait" === this.render.getOrientation()
            ? e.x - i.pageWidth <= i.width / 5 && (s = 1)
            : e.x < i.width / 2 && (s = 1);
          let n = e.y >= i.height / 2 ? "bottom" : "top";
          if (!this.checkDirection(s)) return !1;
          try {
            return (
              (this.flippingPage = this.getFlippingPage(s)),
              (this.bottomPage = this.getBottomPage(s)),
              !!this.flippingPage &&
                !!this.bottomPage &&
                (this.render.setDirection(s),
                (this.calc = new c(s, n, i.pageWidth, i.height)),
                !0)
            );
          } catch (t) {
            return !1;
          }
        }
        showCorner(t) {
          if (!this.checkState("read", "fold_corner")) return;
          let e = this.getBoundsRect(),
            i = e.pageWidth,
            s = Math.sqrt(Math.pow(i, 2) + Math.pow(e.height, 2)) / 5,
            n = this.render.convertToBook(t);
          if (
            n.x > 0 &&
            n.y > 0 &&
            n.x < e.width &&
            n.y < e.height &&
            (n.x < s || n.x > e.width - s) &&
            (n.y < s || n.y > e.height - s)
          )
            if (null === this.calc) {
              if (!this.start(t)) return;
              this.setState("fold_corner"), this.calc.calc({ x: i - 1, y: 1 });
              let s = "bottom" === this.calc.getCorner() ? e.height - 1 : 1,
                n = "bottom" === this.calc.getCorner() ? e.height - 50 : 50;
              this.animateFlippingTo(
                { x: i - 1, y: s },
                { x: i - 50, y: n },
                !1,
                !1
              );
            } else this.do(this.render.convertToPage(t));
          else
            this.setState("read"),
              this.render.finishAnimation(),
              this.stopMove();
        }
        fold(t) {
          this.setState("user_fold"),
            null === this.calc && this.start(t),
            this.do(this.render.convertToPage(t));
        }
        flip(t) {
          if (
            (null !== this.calc && this.render.finishAnimation(),
            !this.start(t))
          )
            return;
          let e = this.getBoundsRect();
          this.setState("flipping");
          let i = e.height / 10,
            s = "bottom" === this.calc.getCorner() ? e.height - i : i,
            n = "bottom" === this.calc.getCorner() ? e.height : 0;
          this.calc.calc({ x: e.pageWidth - i, y: s }),
            this.animateFlippingTo(
              { x: e.pageWidth - i, y: s },
              { x: -e.pageWidth, y: n },
              !0
            );
        }
        flipNext(t) {
          this.flip({
            x: this.render.getRect().left + 2 * this.render.getRect().pageWidth,
            y: "top" === t ? 1 : this.render.getRect().height - 2,
          });
        }
        flipPrev(t) {
          this.flip({
            x: 10,
            y: "top" === t ? 1 : this.render.getRect().height - 2,
          });
        }
        stopMove() {
          if (null === this.calc) return;
          let t = this.calc.getPosition(),
            e = this.getBoundsRect(),
            i = "bottom" === this.calc.getCorner() ? e.height : 0;
          t.x <= 0
            ? this.animateFlippingTo(t, { x: -e.pageWidth, y: i }, !0)
            : this.animateFlippingTo(t, { x: e.pageWidth, y: i }, !1);
        }
        do(t) {
          null !== this.calc &&
            (this.calc.calc(t),
            this.flippingPage.setArea(this.calc.getFlippingClipArea()),
            this.flippingPage.setPosition(this.calc.getActiveCorner()),
            this.flippingPage.setAngle(this.calc.getAngle()),
            this.bottomPage.setArea(this.calc.getBottomClipArea()),
            this.bottomPage.setPosition(this.calc.getBottomPagePosition()),
            this.bottomPage.setAngle(0),
            this.render.setPageRect(this.calc.getRect()),
            this.render.setBottomPage(this.bottomPage),
            this.render.setFlippingPage(this.flippingPage),
            this.render.drawShadow(
              this.calc.getShadowStartPoint(),
              this.calc.getShadowAngle(),
              this.calc.getFlippingProgress(),
              this.calc.getDirection(),
              this.calc.getShadowLength()
            ));
        }
        animateFlippingTo(t, e, i, s = !0) {
          let n = a.GetCordsFromTwoPoint(t, e),
            o = [];
          for (let t of n) o.push(() => this.do(t));
          let r = this.getAnimationDuration(n.length);
          this.render.startAnimation(o, r, () => {
            this.calc &&
              (i &&
                (1 === this.calc.getDirection()
                  ? this.app.turnToPrevPage()
                  : this.app.turnToNextPage()),
              s &&
                (this.render.setBottomPage(null),
                this.render.setFlippingPage(null),
                this.render.clearShadow(),
                (this.state = "read"),
                this.reset()));
          });
        }
        getAnimationDuration(t) {
          let e = this.app.getSettings().flippingTime;
          return t >= 1e3 ? e : (t / 1e3) * e;
        }
        getFlippingPage(t) {
          let e = this.app.getCurrentPageIndex();
          return "portrait" === this.render.getOrientation()
            ? 0 === t
              ? this.app.getPage(e)
              : this.app.getPage(e - 1)
            : e < this.app.getPageCount() - 1 && e >= 0
            ? 0 === t
              ? this.app.getPage(e + 2)
              : this.app.getPage(e - 1)
            : null;
        }
        getNextPage() {
          let t = this.app.getCurrentPageIndex(),
            e = "portrait" === this.render.getOrientation() ? 0 : 2;
          return t < this.app.getPageCount() - e
            ? this.app.getPage(t + e + 1)
            : null;
        }
        getPrevPage() {
          let t = this.app.getCurrentPageIndex(),
            e = "portrait" === this.render.getOrientation() ? 0 : 2;
          return t - e >= 0 ? this.app.getPage(t - e) : null;
        }
        getBottomPage(t) {
          return 0 === t ? this.getNextPage() : this.getPrevPage();
        }
        checkDirection(t) {
          return 0 === t
            ? this.app.getCurrentPageIndex() <= this.app.getPageCount() - 1
            : this.app.getCurrentPageIndex() >= 1;
        }
        reset() {
          (this.calc = null),
            (this.flippingPage = null),
            (this.bottomPage = null);
        }
        getBoundsRect() {
          return this.render.getRect();
        }
        getPageWidth() {
          return this.getBoundsRect().width / 2;
        }
        getPageHeight() {
          return this.getBoundsRect().height;
        }
        setState(t) {
          this.app.updateState(t), (this.state = t);
        }
        checkState(...t) {
          for (let e of t) if (this.state === e) return !0;
          return !1;
        }
      }
      class g {
        constructor(t, e) {
          (this.leftPage = null),
            (this.rightPage = null),
            (this.flippingPage = null),
            (this.bottomPage = null),
            (this.shadow = null),
            (this.pageRect = null),
            (this.animation = null),
            (this.timer = 0),
            (this.direction = null),
            (this.orientation = null),
            (this.boundsRect = null),
            (this.setting = e),
            (this.app = t);
        }
        drawShadow(t, e, i, s, n) {
          if (!this.app.getSettings().drawShadow) return;
          let o = 100 * this.getSettings().maxShadowOpacity;
          this.shadow = {
            pos: t,
            angle: e,
            width: (((3 * this.getRect().pageWidth) / 4) * i) / 100,
            opacity: ((100 - i) * o) / 100 / 100,
            direction: s,
            length: n,
          };
        }
        clearShadow() {
          this.shadow = null;
        }
        setPageRect(t) {
          this.pageRect = t;
        }
        getOrientation() {
          return this.orientation;
        }
        startAnimation(t, e, i) {
          this.finishAnimation(),
            (this.animation = {
              frames: t,
              duration: e,
              durationFrame: e / t.length,
              onAnimateEnd: i,
              startedAt: this.timer,
            });
        }
        finishAnimation() {
          null !== this.animation &&
            (this.animation.frames[this.animation.frames.length - 1](),
            null !== this.animation.onAnimateEnd &&
              this.animation.onAnimateEnd()),
            (this.animation = null);
        }
        render(t) {
          if (null !== this.animation) {
            let e = Math.round(
              (t - this.animation.startedAt) / this.animation.durationFrame
            );
            e < this.animation.frames.length
              ? this.animation.frames[e]()
              : (this.animation.onAnimateEnd(), (this.animation = null));
          }
          (this.timer = t), this.drawFrame(t);
        }
        getRect() {
          return (
            null === this.boundsRect && this.calculateBoundsRect(),
            this.boundsRect
          );
        }
        calculateBoundsRect() {
          let t = "landscape",
            e = this.getBlockWidth(),
            i = e / 2,
            s = this.getBlockHeight() / 2,
            n = this.setting.width / this.setting.height,
            o = this.setting.width,
            r = this.setting.height,
            a = i - o;
          return (
            "stretch" === this.setting.size
              ? (e < 2 * this.setting.minWidth &&
                  this.app.getSettings().usePortrait &&
                  (t = "portrait"),
                (o =
                  "landscape" === t
                    ? this.getBlockWidth() / 2
                    : this.getBlockWidth()) > this.setting.maxWidth &&
                  (o = this.setting.maxWidth),
                (r = o / n) > this.getBlockHeight() &&
                  (o = (r = this.getBlockHeight()) * n),
                (a = "landscape" === t ? i - o : i - o / 2 - o))
              : e < 2 * o &&
                this.app.getSettings().usePortrait &&
                ((t = "portrait"), (a = i - o / 2 - o)),
            (this.boundsRect = {
              left: a,
              top: s - r / 2,
              width: 2 * o,
              height: r,
              pageWidth: o,
            }),
            t
          );
        }
        update() {
          this.boundsRect = null;
          let t = this.calculateBoundsRect();
          this.orientation !== t &&
            ((this.orientation = t), this.app.updateOrientation(t));
        }
        convertToBook(t) {
          let e = this.getRect();
          return { x: t.x - e.left, y: t.y - e.top };
        }
        convertToPage(t, e) {
          e || (e = this.direction);
          let i = this.getRect();
          return {
            x:
              0 === e ? t.x - i.left - i.width / 2 : i.width / 2 - t.x + i.left,
            y: t.y - i.top,
          };
        }
        convertToGlobal(t, e) {
          if ((e || (e = this.direction), null == t)) return null;
          let i = this.getRect();
          return {
            x:
              0 === e ? t.x + i.left + i.width / 2 : i.width / 2 - t.x + i.left,
            y: t.y + i.top,
          };
        }
        convertRectToGlobal(t, e) {
          return (
            e || (e = this.direction),
            {
              topLeft: this.convertToGlobal(t.topLeft, e),
              topRight: this.convertToGlobal(t.topRight, e),
              bottomLeft: this.convertToGlobal(t.bottomLeft, e),
              bottomRight: this.convertToGlobal(t.bottomRight, e),
            }
          );
        }
        start() {
          this.update();
          let t = (e) => {
            this.render(e), requestAnimationFrame(t);
          };
          requestAnimationFrame(t);
        }
        setDirection(t) {
          this.direction = t;
        }
        getDirection() {
          return this.direction;
        }
        setFlippingPage(t) {
          this.flippingPage = t;
        }
        setBottomPage(t) {
          this.bottomPage = t;
        }
        setRightPage(t) {
          this.rightPage = t;
        }
        setLeftPage(t) {
          this.leftPage = t;
        }
        getSettings() {
          return this.app.getSettings();
        }
      }
      class p extends g {
        constructor(t, e, i) {
          super(t, e), (this.canvas = i), (this.ctx = i.getContext("2d"));
        }
        getBlockWidth() {
          return this.canvas.offsetWidth;
        }
        getBlockHeight() {
          return this.canvas.offsetHeight;
        }
        getContext() {
          return this.ctx;
        }
        drawFrame(t) {
          this.clear(),
            "portrait" !== this.orientation &&
              null != this.leftPage &&
              this.leftPage.simpleDraw(0),
            null != this.rightPage && this.rightPage.simpleDraw(1),
            null != this.bottomPage && this.bottomPage.draw(),
            this.drawBookShadow(),
            null != this.flippingPage && this.flippingPage.draw(),
            null != this.shadow &&
              (this.drawOuterShadow(), this.drawInnerShadow());
          let e = this.getRect();
          "portrait" === this.orientation &&
            (this.ctx.beginPath(),
            this.ctx.rect(e.left + e.pageWidth, e.top, e.width, e.height),
            this.ctx.clip());
        }
        drawBookShadow() {
          let t = this.getRect();
          this.ctx.save(), this.ctx.beginPath();
          let e = t.width / 20;
          this.ctx.rect(t.left, t.top, t.width, t.height);
          let i = { x: t.left + t.width / 2 - e / 2, y: 0 };
          this.ctx.translate(i.x, i.y);
          let s = this.ctx.createLinearGradient(0, 0, e, 0);
          s.addColorStop(0, "rgba(0, 0, 0, 0)"),
            s.addColorStop(0.4, "rgba(0, 0, 0, 0.2)"),
            s.addColorStop(0.49, "rgba(0, 0, 0, 0.1)"),
            s.addColorStop(0.5, "rgba(0, 0, 0, 0.5)"),
            s.addColorStop(0.51, "rgba(0, 0, 0, 0.4)"),
            s.addColorStop(1, "rgba(0, 0, 0, 0)"),
            this.ctx.clip(),
            (this.ctx.fillStyle = s),
            this.ctx.fillRect(0, 0, e, 2 * t.height),
            this.ctx.restore();
        }
        drawOuterShadow() {
          let t = this.getRect();
          this.ctx.save(),
            this.ctx.beginPath(),
            this.ctx.rect(t.left, t.top, t.width, t.height);
          let e = this.convertToGlobal({
            x: this.shadow.pos.x,
            y: this.shadow.pos.y,
          });
          this.ctx.translate(e.x, e.y),
            this.ctx.rotate(Math.PI + this.shadow.angle + Math.PI / 2);
          let i = this.ctx.createLinearGradient(0, 0, this.shadow.width, 0);
          0 === this.shadow.direction
            ? (this.ctx.translate(0, -100),
              i.addColorStop(0, "rgba(0, 0, 0, " + this.shadow.opacity + ")"),
              i.addColorStop(1, "rgba(0, 0, 0, 0)"))
            : (this.ctx.translate(-this.shadow.width, -100),
              i.addColorStop(0, "rgba(0, 0, 0, 0)"),
              i.addColorStop(1, "rgba(0, 0, 0, " + this.shadow.opacity + ")")),
            this.ctx.clip(),
            (this.ctx.fillStyle = i),
            this.ctx.fillRect(0, 0, this.shadow.width, 2 * t.height),
            this.ctx.restore();
        }
        drawInnerShadow() {
          let t = this.getRect();
          this.ctx.save(), this.ctx.beginPath();
          let e = this.convertToGlobal({
              x: this.shadow.pos.x,
              y: this.shadow.pos.y,
            }),
            i = this.convertRectToGlobal(this.pageRect);
          this.ctx.moveTo(i.topLeft.x, i.topLeft.y),
            this.ctx.lineTo(i.topRight.x, i.topRight.y),
            this.ctx.lineTo(i.bottomRight.x, i.bottomRight.y),
            this.ctx.lineTo(i.bottomLeft.x, i.bottomLeft.y),
            this.ctx.translate(e.x, e.y),
            this.ctx.rotate(Math.PI + this.shadow.angle + Math.PI / 2);
          let s = (3 * this.shadow.width) / 4,
            n = this.ctx.createLinearGradient(0, 0, s, 0);
          0 === this.shadow.direction
            ? (this.ctx.translate(-s, -100),
              n.addColorStop(1, "rgba(0, 0, 0, " + this.shadow.opacity + ")"),
              n.addColorStop(0.9, "rgba(0, 0, 0, 0.05)"),
              n.addColorStop(0.7, "rgba(0, 0, 0, " + this.shadow.opacity + ")"),
              n.addColorStop(0, "rgba(0, 0, 0, 0)"))
            : (this.ctx.translate(0, -100),
              n.addColorStop(0, "rgba(0, 0, 0, " + this.shadow.opacity + ")"),
              n.addColorStop(0.1, "rgba(0, 0, 0, 0.05)"),
              n.addColorStop(0.3, "rgba(0, 0, 0, " + this.shadow.opacity + ")"),
              n.addColorStop(1, "rgba(0, 0, 0, 0)")),
            this.ctx.clip(),
            (this.ctx.fillStyle = n),
            this.ctx.fillRect(0, 0, s, 2 * t.height),
            this.ctx.restore();
        }
        clear() {
          (this.ctx.fillStyle = "white"),
            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        }
      }
      class u {
        constructor(t, e, i) {
          (this.touchPoint = null),
            (this.swipeTimeout = 250),
            (this.swipeDistance = 80),
            (this.wrapper = t),
            this.wrapper.classList.add("stf__wrapper"),
            (this.app = e);
          let s = this.app.getSettings().usePortrait ? 1 : 2;
          (this.wrapper.style.minWidth = i.minWidth * s + "px"),
            (this.wrapper.style.minHeight = i.minHeight * s + "px"),
            "fixed" === i.size &&
              ((this.wrapper.style.minWidth = i.width * s + "px"),
              (this.wrapper.style.minHeight = i.height * s + "px")),
            i.autoSize &&
              ((this.wrapper.style.width = "100%"),
              (this.wrapper.style.maxWidth = 2 * i.maxWidth + "px")),
            (this.wrapper.style.display = "block");
        }
        getDistElement() {
          return this.distElement;
        }
        getWrapper() {
          return this.wrapper;
        }
        setOrientationStyle(t) {
          this.wrapper.classList.remove("--portrait", "--landscape"),
            "portrait" === t
              ? (this.app.getSettings().autoSize &&
                  (this.wrapper.style.paddingBottom =
                    (this.app.getSettings().height /
                      this.app.getSettings().width) *
                      100 +
                    "%"),
                this.wrapper.classList.add("--portrait"))
              : (this.app.getSettings().autoSize &&
                  (this.wrapper.style.paddingBottom =
                    (this.app.getSettings().height /
                      (2 * this.app.getSettings().width)) *
                      100 +
                    "%"),
                this.wrapper.classList.add("--landscape")),
            this.update();
        }
        setHandlers() {
          this.distElement.addEventListener("mousedown", (t) => {
            let e = this.getMousePos(t.clientX, t.clientY);
            this.app.startUserTouch(e), t.preventDefault();
          }),
            this.distElement.addEventListener("touchstart", (t) => {
              if (t.changedTouches.length > 0) {
                let e = t.changedTouches[0],
                  i = this.getMousePos(e.clientX, e.clientY);
                (this.touchPoint = { point: i, time: Date.now() }),
                  setTimeout(() => {
                    null !== this.touchPoint && this.app.startUserTouch(i);
                  }, this.swipeTimeout),
                  t.preventDefault();
              }
            }),
            window.addEventListener("mousemove", (t) => {
              let e = this.getMousePos(t.clientX, t.clientY);
              this.app.userMove(e, !1);
            }),
            window.addEventListener("touchmove", (t) => {
              if (t.changedTouches.length > 0) {
                let e = t.changedTouches[0];
                this.app.userMove(this.getMousePos(e.clientX, e.clientY), !0);
              }
            }),
            window.addEventListener("mouseup", (t) => {
              let e = this.getMousePos(t.clientX, t.clientY);
              this.app.userStop(e);
            }),
            window.addEventListener("touchend", (t) => {
              if (t.changedTouches.length > 0) {
                let e = t.changedTouches[0],
                  i = this.getMousePos(e.clientX, e.clientY),
                  s = !1;
                if (null !== this.touchPoint) {
                  let t = i.x - this.touchPoint.point.x,
                    e = Math.abs(i.y - this.touchPoint.point.y);
                  Math.abs(t) > this.swipeDistance &&
                    e < 2 * this.swipeDistance &&
                    Date.now() - this.touchPoint.time < this.swipeTimeout &&
                    (t > 0
                      ? this.app.flipPrev(
                          this.touchPoint.point.y <
                            this.app.getRender().getRect().height / 2
                            ? "top"
                            : "bottom"
                        )
                      : this.app.flipNext(
                          this.touchPoint.point.y <
                            this.app.getRender().getRect().height / 2
                            ? "top"
                            : "bottom"
                        ),
                    (s = !0)),
                    (this.touchPoint = null);
                }
                this.app.userStop(i, s);
              }
            });
        }
        getMousePos(t, e) {
          let i = this.distElement.getBoundingClientRect();
          return { x: t - i.left, y: e - i.top };
        }
      }
      class m extends u {
        constructor(t, e, i, s) {
          for (let n of (super(t, e, i),
          t.insertAdjacentHTML("afterbegin", '<div class="stf__block"></div>'),
          (this.distElement = t.querySelector(".stf__block")),
          s))
            this.distElement.appendChild(n);
          window.addEventListener(
            "resize",
            () => {
              this.update();
            },
            !1
          ),
            this.setHandlers();
        }
        update() {
          this.app.getRender().update();
        }
      }
      class f extends u {
        constructor(t, e, i) {
          super(t, e, i),
            (t.innerHTML = '<canvas class="stf__canvas"></canvas>'),
            (this.canvas = t.querySelectorAll("canvas")[0]),
            window.addEventListener(
              "resize",
              () => {
                this.update();
              },
              !1
            ),
            (this.distElement = this.canvas),
            this.resizeCanvas(),
            this.setHandlers();
        }
        resizeCanvas() {
          let t = getComputedStyle(this.canvas),
            e = parseInt(t.getPropertyValue("width"), 10),
            i = parseInt(t.getPropertyValue("height"), 10);
          (this.canvas.width = e), (this.canvas.height = i);
        }
        getCanvas() {
          return this.canvas;
        }
        update() {
          this.resizeCanvas(), this.app.getRender().update();
        }
      }
      class y extends g {
        constructor(t, e, i, s) {
          super(t, e),
            (this.outerShadow = null),
            (this.innerShadow = null),
            (this.element = i),
            (this.items = s);
        }
        getBlockWidth() {
          return this.element.offsetWidth;
        }
        getBlockHeight() {
          return this.element.offsetHeight;
        }
        clearShadow() {
          super.clearShadow(),
            this.outerShadow.remove(),
            this.innerShadow.remove(),
            (this.outerShadow = null),
            (this.innerShadow = null);
        }
        drawShadow(t, e, i, s, n) {
          super.drawShadow(t, e, i, s, n),
            null === this.outerShadow &&
              (this.element.insertAdjacentHTML(
                "beforeend",
                '<div class="stf__outerShadow"></div>'
              ),
              (this.outerShadow =
                this.element.querySelector(".stf__outerShadow")),
              (this.outerShadow.style.zIndex = (
                this.getSettings().startZIndex + 10
              ).toString(10)),
              (this.outerShadow.style.left = "0px"),
              (this.outerShadow.style.top = "0px")),
            null === this.innerShadow &&
              (this.element.insertAdjacentHTML(
                "beforeend",
                '<div class="stf__innerShadow"></div>'
              ),
              (this.innerShadow =
                this.element.querySelector(".stf__innerShadow")),
              (this.innerShadow.style.zIndex = (
                this.getSettings().startZIndex + 10
              ).toString(10)),
              (this.innerShadow.style.left = "0px"),
              (this.innerShadow.style.top = "0px"));
        }
        drawInnerShadow() {
          let t = this.getRect(),
            e = (3 * this.shadow.width) / 4,
            i = 0 === this.getDirection() ? e : 0,
            s = 0 === this.getDirection() ? "to left" : "to right",
            n = this.convertToGlobal(this.shadow.pos),
            o = this.shadow.angle + (3 * Math.PI) / 2;
          (this.innerShadow.style.width = e + "px"),
            (this.innerShadow.style.height = 2 * t.height + "px"),
            (this.innerShadow.style.background =
              "linear-gradient(" +
              s +
              ", rgba(0, 0, 0, " +
              this.shadow.opacity +
              ") 5%, rgba(0, 0, 0, 0.05) 15%,rgba(0, 0, 0, " +
              this.shadow.opacity +
              ") 35%, rgba(0, 0, 0, 0) 100% )"),
            (this.innerShadow.style.transformOrigin = i + "px 100px"),
            (this.innerShadow.style.transform =
              "translate3d(" +
              (n.x - i) +
              "px, " +
              (n.y - 100) +
              "px, 0) rotate(" +
              o +
              "rad)");
          let r = [
              this.pageRect.topLeft,
              this.pageRect.topRight,
              this.pageRect.bottomRight,
              this.pageRect.bottomLeft,
            ],
            h = "polygon( ";
          for (let t of r) {
            let e =
              1 === this.getDirection()
                ? { x: -t.x + this.shadow.pos.x, y: t.y - this.shadow.pos.y }
                : { x: t.x - this.shadow.pos.x, y: t.y - this.shadow.pos.y };
            h +=
              (e = a.GetRotatedPoint(e, { x: i, y: 100 }, o)).x +
              "px " +
              e.y +
              "px, ";
          }
          (h = h.slice(0, -2)),
            (h += ")"),
            (this.innerShadow.style.clipPath = h),
            this.innerShadow.style.setProperty("-webkit-clip-path", h);
        }
        drawOuterShadow() {
          let t = this.getRect(),
            e = this.convertToGlobal({
              x: this.shadow.pos.x,
              y: this.shadow.pos.y,
            }),
            i = this.shadow.angle + (3 * Math.PI) / 2,
            s = 1 === this.getDirection() ? this.shadow.width : 0,
            n = 0 === this.getDirection() ? "to right" : "to left";
          (this.outerShadow.style.width = this.shadow.width + "px"),
            (this.outerShadow.style.height = 2 * t.height + "px"),
            (this.outerShadow.style.background =
              "linear-gradient(" +
              n +
              ", rgba(0, 0, 0, " +
              this.shadow.opacity +
              "), rgba(0, 0, 0, 0))"),
            (this.outerShadow.style.transformOrigin = s + "px 100px"),
            (this.outerShadow.style.transform =
              "translate3d(" +
              (e.x - s) +
              "px, " +
              (e.y - 100) +
              "px, 0) rotate(" +
              i +
              "rad)");
          let o = [];
          o.push(
            { x: 0, y: 0 },
            { x: t.pageWidth, y: 0 },
            { x: t.pageWidth, y: t.height },
            { x: 0, y: t.height }
          );
          let r = "polygon( ";
          for (let t of o)
            if (null !== t) {
              let e =
                1 === this.getDirection()
                  ? { x: -t.x + this.shadow.pos.x, y: t.y - this.shadow.pos.y }
                  : { x: t.x - this.shadow.pos.x, y: t.y - this.shadow.pos.y };
              r +=
                (e = a.GetRotatedPoint(e, { x: s, y: 100 }, i)).x +
                "px " +
                e.y +
                "px, ";
            }
          (r = r.slice(0, -2)),
            (r += ")"),
            (this.outerShadow.style.clipPath = r),
            this.outerShadow.style.setProperty("-webkit-clip-path", r);
        }
        drawFrame(t) {
          this.clear(),
            "portrait" !== this.orientation
              ? null != this.leftPage && this.leftPage.simpleDraw(0)
              : null != this.leftPage && this.leftPage.clearSaved(),
            null != this.rightPage && this.rightPage.simpleDraw(1),
            null != this.bottomPage &&
              (("portrait" === this.orientation && 1 === this.direction) ||
                ((this.bottomPage.getElement().style.zIndex = (
                  this.getSettings().startZIndex + 3
                ).toString(10)),
                this.bottomPage.draw())),
            null != this.flippingPage &&
              ((this.flippingPage.getElement().style.zIndex = (
                this.getSettings().startZIndex + 4
              ).toString(10)),
              this.flippingPage.draw()),
            null != this.shadow &&
              (this.drawOuterShadow(), this.drawInnerShadow());
        }
        clear() {
          let t = [];
          for (let e of (this.leftPage && t.push(this.leftPage.getElement()),
          this.rightPage && t.push(this.rightPage.getElement()),
          this.flippingPage && t.push(this.flippingPage.getElement()),
          this.bottomPage && t.push(this.bottomPage.getElement()),
          this.items))
            t.includes(e) ||
              ((e.style.display = "none"),
              (e.style.zIndex = (this.getSettings().startZIndex + 1).toString(
                10
              )),
              (e.style.transform = ""));
        }
        clearClass(t) {
          null !== t && t.getElement().classList.remove("--left", "--right");
        }
        setRightPage(t) {
          this.clearClass(this.rightPage),
            null !== this.rightPage &&
              t !== this.rightPage &&
              this.rightPage.clearSaved(),
            null !== t && t.getElement().classList.add("--right"),
            super.setRightPage(t);
        }
        setLeftPage(t) {
          this.clearClass(this.leftPage),
            null !== this.leftPage &&
              t !== this.rightPage &&
              this.leftPage.clearSaved(),
            null !== t && t.getElement().classList.add("--left"),
            super.setLeftPage(t);
        }
        setBottomPage(t) {
          null !== t &&
            t
              .getElement()
              .classList.add(1 === this.direction ? "--left" : "--right"),
            super.setBottomPage(t);
        }
        setFlippingPage(t) {
          null !== t &&
            t
              .getElement()
              .classList.add(1 === this.direction ? "--right" : "--left"),
            super.setFlippingPage(t);
        }
        update() {
          super.update(),
            null !== this.rightPage &&
              (this.rightPage.getElement().classList.add("--right"),
              this.rightPage.clearSaved()),
            null !== this.leftPage &&
              (this.leftPage.getElement().classList.add("--left"),
              this.leftPage.clearSaved());
        }
      }
      let x = (() => {
        class t {
          static GetSettings(t) {
            let e = this._default;
            if (
              (Object.assign(e, t), "stretch" !== e.size && "fixed" !== e.size)
            )
              throw Error(
                'Invalid size type. Available only "fixed" and "stretch" value'
              );
            if (e.width <= 0 || e.height <= 0)
              throw Error("Invalid width or height");
            if (e.flippingTime <= 0) throw Error("Invalid flipping time");
            return (
              e.minWidth <= 0 && (e.minWidth = e.width),
              e.maxWidth < e.minWidth && (e.maxWidth = e.minWidth),
              e.minHeight <= 0 && (e.minHeight = e.height),
              e.maxHeight < e.minHeight && (e.maxHeight = e.minHeight),
              e
            );
          }
        }
        return (
          (t._default = {
            startPage: 0,
            size: "fixed",
            width: 0,
            height: 0,
            minWidth: 0,
            maxWidth: 0,
            minHeight: 0,
            maxHeight: 0,
            drawShadow: !0,
            flippingTime: 1e3,
            usePortrait: !0,
            startZIndex: 0,
            autoSize: !0,
            maxShadowOpacity: 1,
          }),
          t
        );
      })();
      i(0);
      class w extends class {
        constructor() {
          this.events = {};
        }
        on(t, e) {
          return (
            t in this.events ? this.events[t].push(e) : (this.events[t] = [e]),
            this
          );
        }
        off(t) {
          delete this.events[t];
        }
        trigger(t, e, i = null) {
          t in this.events &&
            this.events[t].forEach((t) => {
              t({ data: i, object: e });
            });
        }
      } {
        constructor(t, e) {
          super(),
            (this.isUserTouch = !1),
            (this.isUserMove = !1),
            (this.pages = null),
            (this.currentPage = 0),
            (this.setting = null);
          try {
            (this.setting = x.GetSettings(e)), (this.block = t);
          } catch (t) {}
        }
        update() {
          this.render.update(), this.pages.show(this.currentPage);
        }
        turnToPrevPage() {
          let t = "portrait" === this.render.getOrientation() ? 1 : 2;
          this.currentPage < t ||
            ((this.currentPage -= t), this.pages.show(this.currentPage));
        }
        turnToNextPage() {
          let t = "portrait" === this.render.getOrientation() ? 1 : 2;
          this.currentPage > this.pages.getPageCount() - t ||
            ((this.currentPage += t), this.pages.show(this.currentPage));
        }
        turnToPage(t) {
          this.checkPage(t) &&
            ((this.currentPage = t), this.pages.show(this.currentPage));
        }
        flipNext(t = "top") {
          this.flip.flipNext(t);
        }
        flipPrev(t = "top") {
          this.flip.flipPrev(t);
        }
        loadFromImages(t) {
          this.ui = new f(this.block, this, this.setting);
          let e = this.ui.getCanvas();
          (this.render = new p(this, this.setting, e)),
            (this.flip = new d(this.render, this)),
            (this.pages = new r(this, this.render, t)),
            this.pages.load(),
            this.render.start(),
            (this.currentPage = this.setting.startPage),
            this.pages.show(this.setting.startPage);
        }
        loadFromHTML(t) {
          (this.ui = new m(this.block, this, this.setting, t)),
            (this.render = new y(
              this,
              this.setting,
              this.ui.getDistElement(),
              t
            )),
            (this.flip = new d(this.render, this)),
            (this.pages = new l(
              this,
              this.render,
              this.ui.getDistElement(),
              t
            )),
            this.pages.load(),
            this.render.start(),
            (this.currentPage = this.setting.startPage),
            this.pages.show(this.setting.startPage);
        }
        updateState(t) {
          this.trigger("changeState", this, t);
        }
        updatePage(t) {
          this.trigger("flip", this, t);
        }
        updateOrientation(t) {
          "landscape" === t
            ? (this.currentPage % 2 != 0 && this.currentPage--, this.update())
            : (this.currentPage++, this.update()),
            this.ui.setOrientationStyle(t),
            this.trigger("changeOrientation", this, t);
        }
        getPageCount() {
          return this.pages.getPageCount();
        }
        getCurrentPageIndex() {
          return this.currentPage;
        }
        getCurrentPage() {
          return this.pages.getPage(this.currentPage);
        }
        getPage(t) {
          return this.pages.getPage(t);
        }
        getRender() {
          return this.render;
        }
        getFlipObject() {
          return this.flip;
        }
        getOrientation() {
          return this.render.getOrientation();
        }
        getBoundsRect() {
          return this.render.getRect();
        }
        getSettings() {
          return this.setting;
        }
        getUI() {
          return this.ui;
        }
        startUserTouch(t) {
          (this.mousePosition = t),
            (this.isUserTouch = !0),
            (this.isUserMove = !1);
        }
        userMove(t, e) {
          this.isUserTouch || e
            ? this.isUserTouch &&
              a.GetDestinationFromTwoPoint(this.mousePosition, t) > 5 &&
              ((this.isUserMove = !0), this.flip.fold(t))
            : this.flip.showCorner(t);
        }
        userStop(t, e = !1) {
          this.isUserTouch &&
            ((this.isUserTouch = !1),
            e || (this.isUserMove ? this.flip.stopMove() : this.flip.flip(t)));
        }
        checkPage(t) {
          return t >= 0 && t < this.pages.getPageCount();
        }
      }
      document.addEventListener("DOMContentLoaded", function () {
        let t = window.innerWidth >= 851,
          e = document.querySelector(".book-desk"),
          i = document.getElementById("htmlBook"),
          s = document.getElementById("htmlBookExample"),
          n = document.getElementById("canvasBook"),
          o = document.getElementById("buttonDemoSelection");
        o && o.remove();
        let r,
          a = t ? "desktop" : "mobile";
        if ("desktop" === a)
          i && i.remove(),
            n && n.remove(),
            e && (e.classList.remove("d-none"), e.classList.add("d-flex"));
        else {
          e && e.remove();
          let h = new w(s, {
            width: 550,
            height: 733,
            size: "stretch",
            minWidth: 350,
            maxWidth: 700,
            minHeight: 467,
            maxHeight: 933,
            autoSize: !0,
            maxShadowOpacity: 0.5,
          });
          h.on("flip", (t) => {
            let e = parseInt(t.data.toString(), 10) + 1;
            (document.querySelector(".page-count").textContent =
              e.toString(10)),
              (document.querySelector(".page-total").textContent = h
                .getPageCount()
                .toString(10));
          }),
            i && h.loadFromHTML(i.querySelectorAll(".page")),
            (function (t, e, i = 3) {
              let s = Array.from(e.querySelectorAll(".page")).map((t) =>
                t.querySelector("img")
              );
              function n(t) {
                for (let e = 0; e < s.length; e++) {
                  let n = s[e];
                  n &&
                    (Math.abs(e - t) <= i
                      ? !n.getAttribute("src") &&
                        n.dataset.src &&
                        n.setAttribute("src", n.dataset.src)
                      : n.getAttribute("src") && n.removeAttribute("src"));
                }
              }
              const o = new IntersectionObserver(
                (t) => {
                  t.forEach((t) => {
                    if (t.isIntersecting) {
                      const e = t.target;
                      e.dataset.src &&
                        ((e.src = e.dataset.src),
                        e.removeAttribute("data-src"),
                        o.unobserve(e));
                    }
                  });
                },
                { rootMargin: "50px", threshold: 0.01 }
              );
              document.querySelectorAll("img[data-src]").forEach((t) => {
                (t.loading = "lazy"), (t.decoding = "async"), o.observe(t);
              }),
                requestAnimationFrame(() =>
                  requestAnimationFrame(() => n(t.getCurrentPageIndex()))
                ),
                t.on("flip", (t) => {
                  n(parseInt(t.data.toString(), 10));
                });
            })(h, i, 3);
          let c = !1,
            d = null;
          function g(t) {
            if (!c && l) {
              if (!d) {
                const t = window.AudioContext || window.webkitAudioContext;
                t && (d = new t());
              }
              d && "suspended" === d.state && d.resume().catch(() => {}),
                (() => {
                  try {
                    return 0 === h.getCurrentPageIndex();
                  } catch {
                    return !0;
                  }
                })() &&
                  ((c = !0),
                  (l.currentTime = 0),
                  l.play().catch((t) => {
                    console.log("Mobile audio autoplay blocked:", t.message);
                  }),
                  s.removeEventListener("pointerdown", g, { capture: !0 }),
                  s.removeEventListener("click", g, { capture: !0 }),
                  s.removeEventListener("touchstart", g, { capture: !0 }));
            }
          }
          s.addEventListener("pointerdown", g, { passive: !0, capture: !0 }),
            s.addEventListener("click", g, { passive: !0, capture: !0 }),
            s.addEventListener("touchstart", g, { passive: !0, capture: !0 }),
            document
              .querySelector(".btn-book-next")
              ?.addEventListener("click", () => h.flipNext()),
            document
              .querySelector(".btn-book-prev")
              ?.addEventListener("click", () => h.flipPrev());
        }
        window.addEventListener(
          "resize",
          () => {
            clearTimeout(r),
              (r = setTimeout(
                () => {
                  let t = window.innerWidth >= 851 ? "desktop" : "mobile";
                  t !== a &&
                    ((a = t),
                    document
                      .getElementById("mobile")
                      ?.classList.toggle("d-none", "desktop" === t),
                    document
                      .getElementById("desktop")
                      ?.classList.toggle("d-none", "mobile" === t));
                },
                window.innerWidth < 851 ? 500 : 250
              ));
          },
          { passive: !0 }
        );
      });
    },
  ]),
  (function () {
    const t = document.getElementById("desktop");
    if (!t) return;
    const e = Array.from(
        { length: 36 },
        (t, e) => `./Images/Schedule/desktop-img/${e + 1}.webp`
      ),
      i = [];
    for (let t = 0; t < e.length; t += 2)
      t + 1 < e.length
        ? i.push([
            { src: e[t], alt: `Σελίδα ${t + 1}` },
            { src: e[t + 1], alt: `Σελίδα ${t + 2}` },
          ])
        : i.push([
            { src: e[t], alt: `Σελίδα ${t + 1}` },
            { type: "blank", src: "", alt: "" },
          ]);
    function s(t, e) {
      const i = document.createElement("div");
      i.className = "page-desk";
      const s = document.createElement("div");
      if (((s.className = "front-desk"), "blank" !== t.type)) {
        const e = document.createElement("img");
        (e.alt = t.alt || ""),
          (e.loading = "lazy"),
          (e.decoding = "async"),
          t.src && (e.src = t.src),
          s.appendChild(e);
      }
      const n = document.createElement("div");
      if (((n.className = "back-desk"), "blank" !== e.type)) {
        const t = document.createElement("img");
        (t.alt = e.alt || ""),
          (t.loading = "lazy"),
          (t.decoding = "async"),
          (t.src = e.src),
          n.appendChild(t);
      }
      return i.appendChild(s), i.appendChild(n), i;
    }
    i.push([
      { src: "./Images/last-page.png", alt: "Τελευταία Σελίδα" },
      { src: "./Images/back-cover.png", alt: "Οπισθόφυλλο" },
    ]);
    let n = 0,
      o = !1,
      r = !1;
    function a() {
      const e = document.createDocumentFragment(),
        o = Math.min(n + 5, i.length);
      for (let t = n; t < o; t++) {
        const [n, o] = i[t];
        e.appendChild(s(n, o));
      }
      t.appendChild(e),
        (n = o),
        document.querySelectorAll(".book-desk").forEach(flipBook);
    }
    function h() {
      const e = t.querySelector(".page-desk:last-of-type");
      e && (l.disconnect(), l.observe(e));
    }
    const l = new IntersectionObserver(
        (t) => {
          r ||
            o ||
            (t.some((t) => t.isIntersecting) &&
              ((o = !0),
              a(),
              (o = !1),
              n >= i.length ? ((r = !0), l.disconnect()) : h()));
        },
        { root: null, rootMargin: "200px", threshold: 0 }
      ),
      c = new Audio("./assets/sounds/flip-intro.mp3");
    (c.preload = "auto"), (c.volume = 1);
    let d = !1;
    function g() {
      d || ((d = !0), c.play().catch(() => {}));
    }
    const p = document.querySelector(".book-desk");
    p &&
      (p.addEventListener("click", g, { passive: !0, once: !0 }),
      p.addEventListener("touchstart", g, { passive: !0, once: !0 })),
      a(),
      n < i.length ? h() : ((r = !0), l.disconnect());
  })();
