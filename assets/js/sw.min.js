const CACHE_NAME = "rcv-precache-v2",
  PRECACHE_URLS = [
    "../../",
    "../../index.html",
    "../css/style.min.css",
    "./script.min.js",
    "./footer.min.js",
    "../../Images/logo-maroon.png",
    "../../Images/og-image-main-branded.png",
    "../../Images/og-image-twitter-branded.png",
    "../../Images/og-image-square-branded.png",
    "../../manifest.webmanifest",
  ];
self.addEventListener("install", (e) => {
  console.log("[SW] Installing Service Worker v2..."),
    e.waitUntil(
      caches
        .open(CACHE_NAME)
        .then((e) => {
          console.log("[SW] Caching files...");
          const t = PRECACHE_URLS.map((t) =>
            e
              .add(t)
              .then(() => {
                console.log("[SW] ✅ Cached:", t);
              })
              .catch((e) => {
                console.warn("[SW] ⚠️ Failed to cache:", t, "-", e.message);
              })
          );
          return Promise.all(t);
        })
        .then(
          () => (console.log("[SW] Installation complete!"), self.skipWaiting())
        )
    );
}),
  self.addEventListener("activate", (e) => {
    console.log("[SW] Activating Service Worker v2..."),
      e.waitUntil(
        caches
          .keys()
          .then((e) =>
            Promise.all(
              e.map((e) => {
                if (e !== CACHE_NAME)
                  return (
                    console.log("[SW] Deleting old cache:", e), caches.delete(e)
                  );
              })
            )
          )
          .then(
            () => (
              console.log("[SW] ✅ Service Worker activated!"),
              self.clients.claim()
            )
          )
      );
  }),
  self.addEventListener("fetch", (e) => {
    "GET" === e.request.method &&
      e.request.url.startsWith("http") &&
      e.respondWith(
        caches.match(e.request).then(
          (t) =>
            t ||
            fetch(e.request)
              .then((t) => {
                if (!t || 200 !== t.status || "error" === t.type) return t;
                const s = t.clone(),
                  n = new URL(e.request.url);
                return (
                  /\.(css|js|png|jpg|jpeg|webp|svg|gif|ico|woff|woff2|ttf)$/i.test(
                    n.pathname
                  ) &&
                    caches.open(CACHE_NAME).then((t) => {
                      t.put(e.request, s);
                    }),
                  t
                );
              })
              .catch(() => caches.match(e.request))
        )
      );
  });
